from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import torch
import torch.nn as nn
import torch.nn.functional as F


import copy
import math
import numpy as np

from .AttModel import pack_wrapper, AttModel

#标准的编码器解码器结构，将模型编码后在进行解码。也就是将模型的编码器解码器部分进行封装，后面会对其中的每层进行逐步实现。
class EncoderDecoder(nn.Module):
    """
    A standard Encoder-Decoder architecture. Base for this and many 
    other models.
    """

    def __init__(self, encoder, decoder, cls_decoder, src_embed, tgt_embed, generator, cls_generator):
        super(EncoderDecoder, self).__init__()
        self.encoder = encoder
        self.decoder = decoder
        self.cls_decoder = cls_decoder #new
        self.src_embed = src_embed
        self.tgt_embed = tgt_embed
        self.generator = generator ##用于最后输出维度映射到词表大小，类在下面
        self.cls_generator = cls_generator  #new


    def forward(self, fc, src, tgt, src_mask, tgt_mask, label_mask):
        "Take in and process masked src and target sequences."
        # src_mask用于不同长度的序列的padding处理
        # tgt_mask用于确保输出过程不涉及后面的单词
        text_hidden, attn = self.decode(self.encode(src, src_mask), src_mask,
                           tgt, tgt_mask)
        cls_hidden, cls_attn = self.cls_decoder(fc, text_hidden, label_mask.unsqueeze(1))
        return text_hidden, cls_hidden, attn, cls_attn

    def encode(self, src, src_mask):
        return self.encoder(self.src_embed(src), src_mask)

    def decode(self, memory, src_mask, tgt, tgt_mask):
        return self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)

    def cls_decode(self, text_hidden, fc, label_mask):
        cls_hidden, cls_attn = self.cls_decoder(fc, text_hidden, label_mask.unsqueeze(1))
        return cls_hidden, cls_attn

#model最后的显性输出层，主要是进行线性映射和softmax
class Generator(nn.Module):
    "Define standard linear + softmax generation step."

    def __init__(self, d_model, vocab):
        super(Generator, self).__init__()
        self.proj = nn.Linear(d_model, vocab)  ##线性映射，转化维度，我的理解为将输入的标准维度转化为自己构建的词向量的空间维度，是为了在后面输出时利用vacab的维度在词典中寻找注意力机制比较注重的维度，然后输出对应的词

    def forward(self, x):
        return F.log_softmax(self.proj(x), dim=-1)

class Cls_Generator(nn.Module):

    def __init__(self, d_model, vocab):
        super(Cls_Generator, self).__init__()
        self.proj = nn.Linear(d_model, vocab)  #线性层的的参数为（输入特征维度，输出特征维度，偏移量），d_model为输入维度，vocab为输出维度。

    def forward(self, x):# 类实例化时会自动调用forward，不需要主动调用。
        return F.log_softmax(self.proj(x), dim=-1)

def clones(module, N):
    "Produce N identical layers."
    return nn.ModuleList([copy.deepcopy(module) for _ in range(N)])

class Encoder(nn.Module):
    "Core encoder is a stack of N layers"

    def __init__(self, layer, N):
        super(Encoder, self).__init__()
        self.layers = clones(layer, N)
        self.norm = LayerNorm(layer.size)

    # 前向传播就是串行的堆叠，后面吃前面的输出做为输入
    def forward(self, x, mask):
        "Pass the input (and mask) through each layer in turn."
        for layer in self.layers:
            x, _ = layer(x, mask)
        return self.norm(x)  #最后这里做的是自己实现的Layer归一化，定义在下面

#自己定义的Layer归一化，这个代码号称是不调用额外的包的，所以这个自己实现
#对应的就是模型图中的norm操作
class LayerNorm(nn.Module):
    "Construct a layernorm module (See citation for details)."

    def __init__(self, features, eps=1e-6):
        super(LayerNorm, self).__init__()
        self.a_2 = nn.Parameter(torch.ones(features))
        self.b_2 = nn.Parameter(torch.zeros(features))
        self.eps = eps

    def forward(self, x):
        mean = x.mean(-1, keepdim=True)
        std = x.std(-1, keepdim=True)
        return self.a_2 * (x - mean) / (std + self.eps) + self.b_2


#对应的就是上面图中黄色方块中的add操作，相当于残差操作
#Sublayer根据模型图有两种，一种是Multi-head attention（橙色方块），一种是Feed forward（蓝色方块）
class SublayerConnection(nn.Module):
    """
    A residual connection followed by a layer norm.
    Note for code simplicity the norm is first as opposed to last.
    """

    def __init__(self, size, dropout):
        super(SublayerConnection, self).__init__()
        self.norm = LayerNorm(size)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x, sublayer, flag='attn'):
        "Apply residual connection to any sublayer with the same size."
        if flag == 'attn':  #默认使用此部分的代码，new
            (c, attn) = sublayer(self.norm(x))
            return x + self.dropout(c), attn
        else:
            return x + self.dropout(sublayer(self.norm(x)))


class EncoderLayer(nn.Module):
    "Encoder is made up of self-attn and feed forward (defined below)"
    def __init__(self, size, self_attn, feed_forward, dropout):
        super(EncoderLayer, self).__init__()
        self.self_attn = self_attn
        self.feed_forward = feed_forward
        self.sublayer = clones(SublayerConnection(size, dropout), 2)   #克隆两层sublayer，用在下面的forward中，一个作为multi-headattention，另一个；作为feed forward
        self.size = size

    def forward(self, x, mask):
        "Follow Figure 1 (left) for connections."
        # Se1f- Attention层
        x, attn = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask))  # self_attn的4个参数：Query,Key, Value,Mask，，这里存在两个变量来存放返回的值，因为SublayerConnection返回两个值，  new

        return self.sublayer[1](x, self.feed_forward, flag='ff'), attn
        #sublayer[0]是 Multi-head attention（橙色方块）
        #sublayer[1]是 Feed forward（蓝色方块）

class Decoder(nn.Module):
    "Generic N layer decoder with masking."
    def __init__(self, layer, N):
        super(Decoder, self).__init__()
        self.layers = clones(layer, N)
        self.norm = LayerNorm(layer.size)

    def forward(self, x, memory, src_mask, tgt_mask):
        attn_list = []
        for layer in self.layers:
            #x：输入的embedding；memory：EncoderLayer的输出
            #src_mask：Encoder的mask用于padding，tgt_mask：Decoder的mask用于隐藏后面的单词的输出
            x, attn = layer(x, memory, src_mask, tgt_mask)

            attn_list.append(attn)
        return self.norm(x), attn_list

class DecoderLayer(nn.Module):
    "Decoder is made of self-attn, src-attn, and feed forward (defined below)"

    def __init__(self, size, self_attn, src_attn, feed_forward, dropout):
        super(DecoderLayer, self).__init__()
        self.size = size
        self.self_attn = self_attn  #对应图中的Decoder的下面部分
        self.src_attn = src_attn  #对应图中的Decoder的中间部分
        self.feed_forward = feed_forward  #对应图中的Decoder的上面部分
        self.sublayer = clones(SublayerConnection(size, dropout), 3)

    def forward(self, x, memory, src_mask, tgt_mask):
        "Follow Figure 1 (right) for connections."
        m = memory
        # 第一层 对应图中的Decoder的下面部分，这里是相当于输出的预测的自注意力，因此是tgt_mask
        x, _ = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, tgt_mask))
        # 第二层，是最后输出与Encoder输出之间的attention计算
        x, attn = self.sublayer[1](x, lambda x: self.src_attn(x, m, m, src_mask, flag=1))
        return self.sublayer[2](x, self.feed_forward, flag='ff'), attn

class Cls_Decoder(nn.Module):
    def __init__(self, layer, N):
        super(Cls_Decoder, self).__init__()
        self.layers = clones(layer, N)
        self.norm = LayerNorm(layer.size)

    def forward(self, x, memory, label_mask):
        attn_list = []
        for layer in self.layers:
            x, attn = layer(x, memory, label_mask)
            attn_list.append(attn)
        return self.norm(x), attn_list

class Cls_DecoderLayer(nn.Module):
    def __init__(self, size, src_attn, feed_forward, dropout):
        super(Cls_DecoderLayer, self).__init__()
        self.size = size
        self.src_attn = src_attn
        self.feed_forward = feed_forward
        self.sublayer = clones(SublayerConnection(size, dropout), 2)

    def forward(self, x, memory, label_mask):
        m = memory
        x, attn = self.sublayer[0](x, lambda x: self.src_attn(x, m, m, mask=label_mask))
        return self.sublayer[1](x, self.feed_forward, flag='ff'), attn

def subsequent_mask(size):
    "Mask out subsequent positions."
  
    attn_shape = (1, size, size)

    subsequent_mask = np.triu(np.ones(attn_shape), k=1).astype('uint8')

    return torch.from_numpy(subsequent_mask) == 0

def attention(query, key, value, mask=None, dropout=None,flag=0):
    "Compute 'Scaled Dot Product Attention'"
    d_k = query.size(-1)  #取每一行有几列
    scores = torch.matmul(query, key.transpose(-2, -1)) \
        / math.sqrt(d_k)  
    if mask is not None:
        scores = scores.masked_fill(mask == 0, -1e9)

    p_attn = F.softmax(scores, dim=-1)  
    if dropout is not None:
        p_attn = dropout(p_attn)
    return torch.matmul(p_attn, value), p_attn  

class MultiHeadedAttention(nn.Module):
    def __init__(self, h, d_model, dropout=0.1):
        "Take in other_model size and number of heads."
        super(MultiHeadedAttention, self).__init__()
        assert d_model % h == 0
        # We assume d_v always equals d_k
        self.d_k = d_model // h
        self.h = h
      
        self.linears = clones(nn.Linear(d_model, d_model), 4)
        self.attn = None
        self.dropout = nn.Dropout(p=dropout)

    def forward(self, query, key, value, mask=None, flag=0):
        "Implements Figure 2"
        if mask is not None:
            # Same mask applied to all h heads.
            mask = mask.unsqueeze(1)
        nbatches = query.size(0)

       
        query, key, value = \
            [l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2)
             for l, x in zip(self.linears, (query, key, value))]

       
        x, self.attn = attention(query, key, value, mask=mask,
                                 dropout=self.dropout,flag=0)

        
        x = x.transpose(1, 2).contiguous() \
             .view(nbatches, -1, self.h * self.d_k)
        self.attn = torch.sum(self.attn,dim=1)/self.h
        return self.linears[-1](x), self.attn

class PositionwiseFeedForward(nn.Module):
    "Implements FFN equation."

    def __init__(self, d_model, d_ff, dropout=0.1):
        super(PositionwiseFeedForward, self).__init__()
        self.w_1 = nn.Linear(d_model, d_ff)
        self.w_2 = nn.Linear(d_ff, d_model)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        return self.w_2(self.dropout(F.relu(self.w_1(x))))

class Embeddings(nn.Module):
    def __init__(self, d_model, vocab):
       
        super(Embeddings, self).__init__()
        self.lut = nn.Embedding(vocab, d_model)
        self.d_model = d_model

    def forward(self, x):
       
        return self.lut(x.long()) * math.sqrt(self.d_model)  
class PositionalEncoding(nn.Module):
    "Implement the PE function."

    def __init__(self, d_model, dropout, max_len=5000):
       
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)

        # Compute the positional encodings once in log space.
        pe = torch.zeros(max_len, d_model)  
        position = torch.arange(0, max_len).unsqueeze(1).float() 
        div_term = torch.exp(torch.arange(0, d_model, 2).float() *  
                             -(math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term) 
        pe = pe.unsqueeze(0) 
        self.register_buffer('pe', pe) 

    def forward(self, x):
        # 输入的最终编码 = word_embedding + positional_embedding
        x = x + self.pe[:, :x.size(1)]  #size = [batch, L, d_model]
        return self.dropout(x)  # size = [batch, L, d_model]

class TransformerModel(AttModel):

    def make_model(self, cls_dim, tgt_vocab, N=4,
                   d_model=512, d_ff=2048, h=8, dropout=0.1):
        "Helper: Construct a other_model from hyperparameters."
        """
        cls_dim=99,
        tgt_vocab=1011，
        N=6，
        d_model=1024,
        d_ff=1024,
        h=8，下面的函数内容中没有用到。
        dropout=0.1，此值不需要改动，固定即可。
        """

        # The cfg name correspondance:
        # N=num_layers
        # d_model=input_encoding_size
        # d_ff=rnn_size
        # h is always 8

        c = copy.deepcopy
        attn = MultiHeadedAttention(h, d_model)
        ff = PositionwiseFeedForward(d_model, d_ff, dropout)
        position = PositionalEncoding(d_model, dropout)
        model = EncoderDecoder(
            #encoderlayer类的初始化参数：def __init__(self, size, self_attn, feed_forward, dropout):
            #encoder类的初始化：def __init__(self, layer, N):
            #d_model：第三维数据表示，每个字使用多少数据进行表示
            Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),
            Decoder(DecoderLayer(d_model, c(attn), c(attn),
                                 c(ff), dropout), N),
            Cls_Decoder(Cls_DecoderLayer(d_model, c(attn), c(ff), dropout), N),
            lambda x: x,  # nn.Sequential(Embeddings(d_model, src_vocab), c(position)),
            nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),
            Generator(d_model, tgt_vocab),
            Cls_Generator(d_model, cls_dim)
        )

        # This was important from their code.
        # Initialize parameters with Glorot / fan_avg.
        for p in model.parameters():
            if p.dim() > 1:
                nn.init.xavier_uniform_(p)  #服从均匀分布
        return model

    def __init__(self, opt):
        super(TransformerModel, self).__init__(opt)
        self.opt = opt

        delattr(self, 'att_embed') #不使用父类AttModel的att_embed的定义，在这里删除重新定义
        self.att_embed = nn.Sequential(*(
            ((nn.BatchNorm1d(self.att_feat_size),) if self.use_bn else ()) +
            (nn.Linear(self.att_feat_size, self.input_encoding_size),
             nn.ReLU(),
             nn.Dropout(self.drop_prob_lm)) +
            ((nn.BatchNorm1d(self.input_encoding_size),) if self.use_bn == 2 else ())))
        if self.opt.use_box:   #若使用了box，则att_feat_size在train，py中长度加了4。所以这里要减去4才是真正的att_feat_size
            self.cls_embed = nn.Sequential(*(
                    ((nn.BatchNorm1d(self.att_feat_size-4),) if self.use_bn else ()) +
                    (nn.Linear(self.att_feat_size-4, self.input_encoding_size),
                     nn.ReLU(),
                     nn.Dropout(self.drop_prob_lm)) +
                    ((nn.BatchNorm1d(self.input_encoding_size),) if self.use_bn == 2 else ())))

        else:
            self.cls_embed = nn.Sequential(*(
                    ((nn.BatchNorm1d(self.att_feat_size),) if self.use_bn else ()) +
                    (nn.Linear(self.att_feat_size, self.input_encoding_size),
                     nn.ReLU(),
                     nn.Dropout(self.drop_prob_lm)) +
                    ((nn.BatchNorm1d(self.input_encoding_size),) if self.use_bn == 2 else ())))

        # self.embed initialized in AttModel is used for embedding word, no needs here which input is image features
        #在AttModel中初始化的self.embed用于嵌入单词，这里不需要输入是图像特征
        delattr(self, 'embed')  
        self.embed = lambda x: x
        delattr(self, 'fc_embed')
        self.fc_embed = lambda x: x
        delattr(self, 'logit')
        del self.ctx2att

        tgt_vocab = self.vocab_size + 1     #2128
        cls_dim = self.opt.cls_dim
        self.model = self.make_model(cls_dim, tgt_vocab,
                                     N=opt.num_layers,
                                     d_model=opt.input_encoding_size,
                                     d_ff=opt.rnn_size)    #cls_dim=18, tgt_vocab=2128, N=4, d_model=1024, d_ff=1024

    def logit(self, x):  # unsafe way
        return self.model.generator.proj(x)

    def init_hidden(self, bsz):
        return []

    def _prepare_feature(self, fc_feats, att_feats, att_masks):

        att_feats, seq, att_masks, seq_mask = self._prepare_feature_forward(att_feats, att_masks)
        memory = self.model.encode(att_feats, att_masks)#encoder的输出，即为memory

        return fc_feats[..., :1], att_feats[..., :1], memory, att_masks

    def _prepare_feature_forward(self, att_feats, att_masks=None, seq=None):
        att_feats, att_masks = self.clip_att(att_feats, att_masks)

        att_feats = pack_wrapper(self.att_embed, att_feats, att_masks)

        if att_masks is None:
            att_masks = att_feats.new_ones(att_feats.shape[:2], dtype=torch.long)
        att_masks = att_masks.unsqueeze(-2)

        if seq is not None:
            # crop the last one
            seq = seq[:, :-1]
            seq_mask = (seq.data > 0)

            seq_mask[:, 0] = seq_mask[:, 0].long() + 1

            seq_mask = seq_mask.unsqueeze(-2)

            seq_mask = seq_mask & subsequent_mask(seq.size(-1)).to(seq_mask)
        else:
            seq_mask = None

        return att_feats, seq, att_masks, seq_mask

    def _forward(self, cls, fc_feats, att_feats, seq, label_mask, att_masks=None):
        att_feats, seq, att_masks, seq_mask = self._prepare_feature_forward(att_feats, att_masks, seq)
        fc_feats = self.cls_embed(fc_feats.double())
        out = self.model(fc_feats, att_feats, seq, att_masks, seq_mask, label_mask)
        outputs_tfidf = out[2][-1]
        outputs_text = self.model.generator(out[0])
        outputs_cls = self.model.cls_generator(out[1])
        return outputs_text, outputs_cls, outputs_tfidf
        # return torch.cat([_.unsqueeze(1) for _ in outputs], 1)
    def cls_core(self, memory, fc, label_mask):

        out, cls_attn = self.model.cls_decode(memory, self.cls_embed(fc), label_mask)
        g_out = self.model.cls_generator(out)

        return g_out, cls_attn
    def core(self, it, fc_feats_ph, att_feats_ph, memory, state, mask):
        """
        state = [ys.unsqueeze(0)]
        """
        if len(state) == 0:
            ys = it.unsqueeze(1)
        else:
            ys = torch.cat([state[0][0], it.unsqueeze(1)], dim=1)
        out, attn = self.model.decode(memory, mask,
                                ys,
                                subsequent_mask(ys.size(1))
                                .to(memory.device))

        return out[:, -1], [ys.unsqueeze(0)], attn
